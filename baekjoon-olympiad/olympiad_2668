package baeck_olympiad;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Scanner;

// 아이디어는 유사하게 풀어냈으나 구현에 있어 참고를 진행
// dfs를 활용하는것 까지 생각했으나 visit 사용하지 않고 또한 최대값을 카운팅 하는 방식에 있어 다른 방식으로 구현해 비효율을 초래해 참고를 통해 문제를 해결했다.

public class KOI_1996_2668 {
	static int[] map;
	static boolean[] visit;
	static int max =0;
	static ArrayList<Integer> answer;
	static int Num =0;
	

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner sc = new Scanner(System.in);
		int size = sc.nextInt();
		map = new int[size+1];
		visit = new boolean[size+1];
		
		answer = new ArrayList<>();
		for(int i=1; i<size+1; ++i) {
			map[i] = sc.nextInt();
		}
		sc.close();
		
		
		for(int i=1; i<size+1; ++i) {
			visit[i] = true;
			Num =i;
			dfs(i);
			visit[i] =false;
			
		}
		Collections.sort(answer);
		System.out.println(answer.size());
		for(int c:answer) System.out.println(c);

	}
	
	public static void dfs(int index) {
		if(Num == map[index]) answer.add(Num);
		
		if(!visit[map[index]]) {
			visit[map[index]] =true;
			dfs(map[index]);
			visit[map[index]] = false;
		}
		
	}

}
