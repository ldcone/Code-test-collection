package baeck_olympiad;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Scanner;
import java.util.StringTokenizer;
//java 
//스스로 해결
public class KOI_1996_2667 {
	static int[][] map;
	static boolean [][] visit;
	static int[] dx = {1,-1,0,0};
	static int[] dy = {0,0,1,-1};
	static int size;
	static ArrayList<Integer> answer;
	static int count =1;
	

	public static void main(String[] args)throws IOException {
		// TODO Auto-generated method stub
		BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));
		size = Integer.parseInt(bf.readLine());
		
		map = new int[size+1][size+1];
		visit = new boolean[size+1][size+1];
		answer = new ArrayList<>();
		
		for(int i=1; i<size+1; ++i) {
			String b = bf.readLine();
			for(int j=1; j<size+1; ++j) {
				map[i][j] =b.charAt(j-1)-'0';
			}
		}
		
		for(int i=1; i< size+1; ++i) {
			for(int j=1; j< size+1; ++j) {
				if(visit[i][j]) continue;
				else if(map[i][j] == 1) {
					visit[i][j] = true;
					dfs(i,j);
					answer.add(count);
					count=1;
				}
				
			}
			
		}
		Collections.sort(answer);
		System.out.println(answer.size());
		for(int i =0; i<answer.size(); ++i) {
			System.out.println(answer.get(i));
		}
		
		
	}
	
	static void dfs(int x, int y) {
		for(int i=0;i<4;++i) {
			int cx = dx[i] + x;
			int cy = dy[i] + y;
			if(cx<1 || cx>=size+1 || cy<1 || cy>=size+1 ) {
				continue;
			}
			if(map[cx][cy] == 1 && visit[cx][cy] == false) {
				visit[cx][cy] = true;
				count++;
				dfs(cx,cy);
			}
			
		}
	}

}
