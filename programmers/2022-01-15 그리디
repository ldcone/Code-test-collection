#1 섬 연결하기 
import java.util.*;
class Solution {
    public int solution(int n, int[][] costs) {
        
        int[] parent = new int[n];
        int answer =0;
        //초기에 연결되기 전에는 자기 자신을 가리키게함 
        for(int i=0; i<parent.length;++i){
            parent[i] = i;
        }
        //val값을 기준으로 정렬 
        Arrays.sort(costs,(o1,o2)->{
            return o1[2]-o2[2];
        });
        
        for(int[]cost:costs){
            int from = cost[0];
            int to = cost[1];
            int val = cost[2];
            //이미 연결이 되어있다면 넘기기(val이 작은순으로 정렬되기때문에 작은것이 먼저 연결되어 그 후의 값은 필요 x)
            if(connectcheck(parent,from,to)) continue;
            answer +=val;
            union(parent,from,to);
        }
        
        return answer;
        
    }
    
    public boolean connectcheck(int[]parent,int from,int to){
        from = getparent(parent,from);
        to = getparent(parent,to);
        return from == to;
    }
    //root값 찾기 
    public int getparent(int[] parent, int edge){
        if(parent[edge] == edge) return edge;
        return getparent(parent,parent[edge]);
    }
    //연결고리 만들어 주기 
    public void union(int[] parent, int from, int to){
        to = getparent(parent,to);
        from = getparent(parent,from);
        if(to <from) parent[from] = to;
        else parent[to] =from;
    }
    
}


#2
import java.util.Arrays;
import java.util.Comparator;
class Solution {
//도착시간 기준으로 정렬
    public int solution(int[][] routes) {
        Arrays.sort(routes,(o1,o2)->{
            return o1[1]-o2[1];
        });
        int answer =0;
        
        int end=routes[0][1];
        int start =0;
        for(int[]route :routes){
            start = route[0];
            //기준 도착시간보다 빠른 출발시간들은 안에 포함 
            //역전시 기준시간 변경 
            if(end<start) {
                answer++;
                end = route[1];
            }
        }
        return answer+1;
        
    }
}
