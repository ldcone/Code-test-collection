#1 - 1 큰수 만들기 실패코드
// class Solution {
//     String answer="";
//     String as="";
//     long max =0;
//     int length=0;
//     int remove=0;
//     public String solution(String number, int k) {
//         length = number.length()-k;
//         remove = k;
        
//         dfs(0,number,0,"");
//         return as;
        
//     }
//     public void dfs(int stage,String number, int index,String answer){
//         StringBuilder temp = new StringBuilder(answer);
//         StringBuilder sb2 = new StringBuilder(answer);
        
//         // String temp = answer;
//         if(index>number.length()-1 && stage != length) return;
//         else if(stage == length){
//             if(max < Long.parseLong(answer)){
//                 max = Long.parseLong(answer);
//                 as = answer;
//                 return ;
//             }
//             return;
//         }
        
//         for(int i = index; i< stage + remove+1; ++i){
            
//             // temp += Character.toString(number.charAt(i));
//             temp.append(Character.toString(number.charAt(i)));
//             dfs(stage+1,number,i+1,temp);
//             temp = sb2;
            
//         }
        
//     }
// }

#1 - 2 성공 코드 
class Solution {
    public String solution(String number, int k) {
         StringBuilder sb = new StringBuilder();
        int n_len = number.length();
        
        // 선택하는 수의 길이 ex) number = 1231234, k = 3 -> select_num = 7 - 3 = 4
        int select_num = n_len - k;
        char maxNum; // 선택한 최대의 숫자 값
        int start = 0; // number의 시작 index
        int end = 0; // number의 끝 index
        
        // 선택될 수 있는 숫자의 길이만큼 for
        for(int i = 0; i < select_num; i++) {
        	maxNum = number.charAt(start);
        	
        	// 선택 index보다 큰 숫자가 나오면 해당 숫자를 maxNum에 저장하고,
        	// 그 index를 end에 저장
        	for(int j = start; j <= (i + k); j++) {
        		if(maxNum < number.charAt(j)) {
        			maxNum = number.charAt(j);
        			end = j;
        		} // if end
        	} // for end
        	
        	sb.append(maxNum);

          	// maxNum에 저장하고 나면 다음 index로 가기
        	start = end + 1;

          	// end에 start 값을 넣어 index를 옮겨줌
         	end = start;
        	
        } // for end
        return sb.toString();
    }
}

#2 구명보트
import java.util.*;
class Solution {
    public int solution(int[] people, int limit) {
       
        Arrays.sort(people);
        int min =0;
        int answer =0;
        
        for(int max =people.length - 1; max >= min;--max){
            if(people[max] + people[min] <= limit) min++;
            answer++;

        }
        
        return answer;
    }
}
