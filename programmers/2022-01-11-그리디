#1-1
class Solution {
    public int solution(int n, int[] lost, int[] reserve) {
        //1.n+1학생들로 표시 [lost는 -1,reserve는 1,나머지는 0]
        int[] student = new int[n]; //java에서 배열은 선언시 0으로 초기화된다.
        for(int i : lost){student[i-1]--;}
        for(int i : reserve){student[i-1]++;}  
        
        //2. reserve를 lost로 나눠주기
        for(int i =0; i<student.length;i++){
            if( student[i] == -1){
                if(i ==0 && student[i+1] ==1) {
                    student[0]++;
                    student[1]--; 
                }else if(i==student.length-1 && student[i-1] == 1){
                    student[i]++;
                    student[i-1]--;
                }else if(i>0 && i<student.length-1){
                    if(student[i-1] ==1){
                        student[i]++;
                        student[i-1]--;
                    }else if(student[i+1] == 1){
                        student[i]++;
                        student[i+1]--;
                    }
                }
                
            }
            
        }
        //3. -1보다 크면 answer ++해주기
        int answer = 0;    
        for(int i =0;i<student.length;i++){
            if(student[i]!=-1) answer++;
        }
        return answer;
    }  
}
#1-2
import java.util.*;

class Solution {
    public int solution(int n, int[] lost, int[] reserve) {
        int answer = 0;
        int lost_length = lost.length;
        int reserve_length = reserve.length;
        Arrays.sort(lost);
        Arrays.sort(reserve);
        answer = n-lost_length;
        
        // 여유가 있지만 도난 당한 경우 빌려줄수 없음으로 제외해 준다.
        for(int i =0; i<lost_length; ++i){
            for(int j=0; j<reserve_length; ++j){
                if(lost[i] == reserve[j]){
                    lost[i] = -5;
                    answer += 1;
                    reserve[j] = -1;
                    break;
                }
            }
        }
        
        for(int i =0; i<lost_length; ++i){
            for(int j=0; j<reserve_length; ++j){
                if(lost[i]-1 == reserve[j]){
                    answer += 1;
                    reserve[j] = -1;
                    break;
                }else if(lost[i]+1 == reserve[j]){
                    answer += 1;
                    reserve[j] = -1;
                    break;
                }
            }
        }
        return answer;
    }
}

#2.
class Solution{
    public int solution(String name) {
        int answer =0;
        
        char[] alpha = name.toCharArray();
        int min =alpha.length-1;
        for(int i =0 ;i<alpha.length; ++i){
            int a = alpha[i];
         //아스키코드를 활용 
            if(a >=65 && a<=78){
                answer += a-65;
            }else if(a>78 && a<91){
                answer += 91-a;
            }
            
            int next = i+1;
            while(next <alpha.length && alpha[next]=='A')
                next++;
            
            // 원점으로 돌아가야 하기때문에 i+i를 해준뒤 전체길이에서 연속되는 A만큼 제외해준 길이를 탐색해준것과 전체 길이만큼 탐색한것 중에 짧은것 비교
            min = Math.min(min,i+i+alpha.length-next);
            
        }
        
        
        return answer+min;
    }
    
}
