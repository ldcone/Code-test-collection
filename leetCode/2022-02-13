# 78. Subsets
// class Solution {
//     public List<List<Integer>> subsets(int[] nums) {
        
//         List<List<Integer>> array = new ArrayList<>();
//         array.add(new ArrayList<>());
//         if(nums.length == 1){
//             List<Integer> add2 = new ArrayList<>();
//             add2.add(nums[0]);
//             return array;
//         }
        
//         dfs(new ArrayList<>(),array, nums,0,nums.length,0);
        
//         return array;
        
        
//     }
    
//     public void dfs(List<Integer> put, List<List<Integer>> array,int[] nums, int count, int size, int index){
//         if(count == size) return;
        
//         for(int i= index; i<size; ++i){
            
//             put.add(nums[i]);
//             array.add(put);
//             dfs(put,array,nums,count+1,size,i);
            
//         }
//     }
// }


class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> ans = new ArrayList();//to store the final answer
        
        ans.add(new ArrayList<Integer>()); //add empty subset
        int size= 0;
        for(int n:nums)
        {
            size= ans.size();
            for(int i=0; i<size; i++)
            {
                List<Integer> list = new ArrayList<Integer>(ans.get(i)); //to store each subset
                list.add(n);
                ans.add(list);
            }
        }
        return ans;
    }
}
