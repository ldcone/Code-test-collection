#1 27. Remove Element
class Solution {
    public int removeElement(int[] nums, int val) {
        int count =0;
        for(int i=0; i<nums.length; ++i){
            if(nums[i] == val) continue;
            nums[count]=nums[i];
            count++;
        }
        return count++;
        
    }
}

#2 28.Implement strStr()
import java.util.*;
class Solution {
    public int strStr(String haystack, String needle) {
        
        if(needle.equals("")) return 0;
        else if(haystack.equals("")) return -1;
        else if(needle.length()> haystack.length()) return -1;
        int count=0;
        int index =0;
        //탐색속도를 위해 비교군만큼 길이 제거하기
        for(int j =0; j<=haystack.length()-needle.length();++j){
            for(int i=j; i<haystack.length(); ++i){
                 if(haystack.charAt(i) == needle.charAt(count)) {
                    if(count ==0) index =i;
                    if(count == needle.length()-1) return index;
                    count++;
                }else if(count !=0 && (haystack.charAt(i)!= needle.charAt(count))){
                    count =0;
                    break;
                }
           
        }
            count=0;
        }
        
        return -1;
       
    }
}

#3 35. Search Insert Position
class Solution {
    public int searchInsert(int[] nums, int target) {
        int mid, lo = 0, hi = nums.length;
        while(lo < hi) {
            mid = lo + (hi - lo)/2;
            if (nums[mid] == target) return mid;
            if (nums[mid] < target) lo = mid + 1;
            else hi = mid;
        }
        return lo;
    }
}

