#704. Binary Search
class Solution {
    public int search(int[] nums, int target) {
        int start =0;
        int end = nums.length-1;
        //이진탐색 logn
        while(start<=end){
            int mid = (start+end)/2;
            if(nums[mid] == target) return mid;
            else if(nums[mid]< target){
                start = mid+1;
            }else if(nums[mid]>target){
                end = mid-1;
            }
        }
        return -1;
        
        //전체 탐색
       // for(int i=0; i<nums.length;++i){
       //     if(nums[i] == target) return i;
       // } 
       //  return-1;
        
        
    }
}

#278. First Bad Version
/* The isBadVersion API is defined in the parent class VersionControl.
      boolean isBadVersion(int version); */

public class Solution extends VersionControl {
    public int firstBadVersion(int n) {
        int start = 1;
        int end = n;
        
        //start+end/2는 산술적 평균 거리적 평균이 안나옴
        // 거리적 평균이 나오려면 start +(end-start)/2를 해줘야 한다.
        
        while (start<=end){
            int mid = start+ (end - start )/2;
            if(isBadVersion(mid)){
                if(mid ==1) return mid;
                else if(!isBadVersion(mid-1))return mid;
                end = mid-1;
            }else{
                start = mid+1;
            }
        }
       
        return 1;
        
        
    }
}


#35. Search Insert Position
class Solution {
    public int searchInsert(int[] nums, int target) {
        int start = 0;
        int end = nums.length-1;
        while(start <= end){
            int mid = start +(end-start)/2;
            if(nums[mid] == target){
                if(mid ==0) return mid;
                else if(nums[mid-1] != target) return mid;
                end = mid-1;
            }else if(nums[mid]<target){
                if(mid ==nums.length-1) return mid+1;
                else if(nums[mid +1]>target) return mid+1;
                start = mid+1;
            }else if(nums[mid]>target){
                if(mid == 0) return mid;
                else if(nums[mid -1]<target) return mid;
                end = mid-1;
            }
        }
        return 0;
    }
}
