#784. Letter Case Permutation
class Solution {
    public List<String> letterCasePermutation(String str) {
        List<String> permutations = new ArrayList<>();
        if (str == null) {
            return permutations;
        }
        
        permutations.add(str);
        
        for (int i=0; i<str.length(); i++) {
            if (Character.isLetter(str.charAt(i))) {
                int n = permutations.size();
                
                for (int j=0; j<n; j++) {
                    char[] chs = permutations.get(j).toCharArray();
                    if (Character.isUpperCase(chs[i])) {
                        chs[i] = Character.toLowerCase(chs[i]);
                    } else {
                        chs[i] = Character.toUpperCase(chs[i]);
                    }
                    
                    permutations.add(String.valueOf(chs));
                }
            }
        }
        
        return permutations;
    }
}
# 136. Single Number
class Solution {
    public int singleNumber(int[] nums) {
        HashSet<Integer> set = new HashSet<>();
        HashMap<Integer,Boolean> map = new HashMap<>();
        
        boolean[] visited = new boolean[nums.length];
        for(int i=0; i<nums.length; ++i){
            if(set.add(nums[i])){
                map.put(nums[i],true);
            }else{
                map.remove(nums[i]);
            }
        }
        
        for(int i=0; i< nums.length; ++i){
            if(map.get(nums[i]) != null) return nums[i];
        }
        return 0;
    }
}

// class Solution {
//     public int singleNumber(int[] nums) {
//         int nums_length=nums.length;
//         int ans=0;
//         for(int i=0;i<nums_length;i++)
//         {
            
//             ans^=nums[i];
//             System.out.println(ans);
//         }
//         return ans;
//     }
// }
