#
//dfs적용시 시간초과

// class Solution {
//     int answer=0;
//     List<int[]> total;
//     public int fourSumCount(int[] nums1, int[] nums2, int[] nums3, int[] nums4) {
//         total = new ArrayList<>();
//         total.add(nums1);
//         total.add(nums2);
//         total.add(nums3);
//         total.add(nums4);
//         dfs(total,0,0);
//         return answer;
//     }
//     public void dfs(List<int[]> nums, int sum, int count){
//         if(count ==4){
//             if(sum == 0){
//                 answer++;
//             }
//             return;
//         }
//         int[] nums1 = nums.get(count);
//         for(int i =0; i<nums1.length; ++i){
//             sum += nums1[i];
//             dfs(nums,sum,count+1);
//             sum = sum - nums1[i];
//         }
        
//     }
// }


class Solution {
    public int fourSumCount(int[] nums1, int[] nums2, int[] nums3, int[] nums4) {
        HashMap<Integer,Integer> map = new HashMap<>();
        
        for(int a :nums1){
            for(int b:nums2){
                map.put(a+b,map.getOrDefault(a+b,0)+1);
            }
        }
        int answer=0;
        
        for(int a:nums3){
            for(int b:nums4){
                if(map.getOrDefault(-(a+b),0) >= 1){
                    answer += map.get(-(a+b));
                }
            }
        }
        
        
        return answer;
    }

}
